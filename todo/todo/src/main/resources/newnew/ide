#시험 규정
인터넷 검색  : 불가능
IDE 사용 : 가능
듀얼 모니터 사용 : 불가능
메모 사용 : 빈 종이에 한하여 사용 가능
시험 중 화장실은 1분 이내로 이용 가능합니다. 
      화면 상에 메모장을 띄워 [이름, 이용 시간]을 명시합니다. 
라이브러리 관련 문의 :  과제에 명시된 제약사항을 참고하여 풀이해주시기 바랍니다.
2.2.2. 에피소드 목록 조회
특정 작품의 에피소드 목록을 출력한다.

에피소드별 누적리뷰별점(totalReviewPoint), 누적리뷰갯수(totalReviewCount)를 이용하여 리뷰평점(averageReviewPoint) 계산한다. 리뷰평점은 소수점 셋째 자리에서 반올림하여 둘째
자리까지만 출력한다.

averageReviewPoint 값이 큰 순서로 정렬하여 출력한다. averageReviewPoint 값이 동일하다면 id 값이 큰 순서로 정렬한다.

URL: GET /api/webtoon/{webtoonId}/episodes
{webtoonId}: 작품 PK
Response Body: 에피소드 목록 (/api/webtoon/1/episodes 출력 예시)
{
  "data": [
    {
      "id": 2,
      "webtoonId": 1,
      "seq": 2,
      "title": "작품1 2화",
      "totalReviewPoint": 8,
      "totalReviewCount": 3,
      "averageReviewPoint": 2.67,
      "createAt": "2021-06-02 22:15:00"
    },
    {
      "id": 1,
      "webtoonId": 1,
      "seq": 1,
      "title": "작품1 1화",
      "totalReviewPoint": 0,
      "totalReviewCount": 0,
      "averageReviewPoint": 0.0,
      "createAt": "2021-06-01 23:45:00"
    }
  ],
  "error": null
}
2.2.3. 에피소드 조회
특정 작품의 특정 에피소드를 출력한다.

URL: GET /api/webtoon/{webtoonId}/episode/{seq}
{webtoonId}: 작품 PK
{seq}: 에피소드 회차 (에피소드 PK 아님에 주의)
Response Body: 에피소드 (/api/webtoon/4/episode/1 출력 예시)
{
  "data": {
    "id": 3,
    "webtoonId": 4,
    "seq": 1,
    "title": "작품4 1화",
    "totalReviewPoint": 13,
    "totalReviewCount": 3,
    "averageReviewPoint": 4.33,
    "createAt": "2021-05-01 21:10:00"
  },
  "error": null
}
2.2.4. 에피소드 리뷰별점 추가
특정 작품의 특정 에피소드에 리뷰별점을 추가한다. (동일 사용자가 반복해서 리뷰별점을 남길 수 있다.)

리뷰별점이 추가될때 해당 에피소드의 totalReviewPoint, totalReviewCount 계산값도 함께 갱신해야 한다. 실제 서비스 환경에서는 동일 에피소드에 다수의 리뷰별점이 동시에 추가될 수
있다. 따라서 동시에 실행된 트랜잭션에 의해 에피소드의 totalReviewPoint, totalReviewCount 계산값이 틀려지지 않도록 특별한 고려가 필요하다. 또한 웹툰 백엔드 API 서버는
고가용성을 위해 항상 2개 이상의 인스턴스가 운영된다는 점도 고려한다.

URL: POST /api/webtoon/{webtoonId}/episode/{seq}/review
{webtoonId}: 작품 PK
{seq}: 에피소드 회차
Request Body:
userId: 리뷰별점 작성자 PK (1로 고정)
point: 별점 (1~5 사이의 정수)
{
  "userId": 1,
  "point": 1
}
Response Body: 리뷰별점 추가 결과 (point=1 일때 /api/webtoon/1/episode/2/review 출력 예시)
webtoonId=1, seq=2 값이 가리키는 에피소드는 totalReviewPoint=8, totalReviewCount=3 초기값을 지님
afterTotalReviewPoint: 리뷰별점 추가 후 에피소드의 누적리뷰별점
afterTotalReviewCount: 리뷰별점 추가 후 에피소드의 누적리뷰갯수
afterAverageReviewPoint: 리뷰별점 추가 후 에피소드의 리뷰평점
{
  "data": {
    "id": 10,
    "webtoonId": 1,
    "seq": 2,
    "point": 1,
    "afterTotalReviewPoint": 9,
    "afterTotalReviewCount": 4,
    "afterAverageReviewPoint": 2.25,
    "createAt": "2021-06-06 21:06:16"
  },
  "error": null
}


2.2.1. 작품(Webtoon) 목록 조회
검색 조건에 따라 작품 목록을 출력한다. 검색 조건이 null인 경우 검색 조건에서 제외한다.

검색 조건 처리를 위해 com.naverwebtoon.webtoon.models.WebtoonSearchCriteria 클래스를 이용한다. 이를
위해 org.springframework.web.method.support.HandlerMethodArgumentResolver 인터페이스 구현을 추가하고, WebtoonSearchCriteria 인스턴스를
Controller 메소드에 직접 전달할 수 있어야한다.

id 값이 큰 순서로 정렬하여 출력한다.

URL: GET /api/webtoons?date={date}&genre={genre}&finished={finished}
{date}: 날짜(yyyyMMdd)
입력으로 주어진 날짜의 요일과 작품의 연재요일이 일치하는 경우 목록에 포함 (weekday 컬럼 참고)
생략할 경우 오늘 날짜로 처리
genre: 장르 (OMNIBUS, STORY, FANTASY, SPORTS, ETC)
생략할 경우 null로 처리
finished: 완결 여부 (true 또는 false)
생략할 경우 null로 처리
Response Body: 작품 목록 (/api/webtoons?date=20210607 출력 예시)
{
  "data": [
    {
      "id": 2,
      "title": "작품2",
      "artistName": "작가2",
      "weekday": 1,
      "genre": "STORY",
      "finished": false,
      "createAt": "2021-06-06 18:46:03"
    },
    {
      "id": 1,
      "title": "작품1",
      "artistName": "작가1",
      "weekday": 1,
      "genre": "FANTASY",
      "finished": false,
      "createAt": "2021-06-06 18:46:03"
    }
  ],
  "error": null
}
/api/webtoons?date=20210607&genre=STORY&finished=false 출력 예시
{
  "data": [
    {
      "id": 2,
      "title": "작품2",
      "artistName": "작가2",
      "weekday": 1,
      "genre": "STORY",
      "finished": false,
      "createAt": "2021-06-06 18:46:03"
    }
  ],
  "error": null
}

DROP TABLE IF EXISTS reviews CASCADE;
DROP TABLE IF EXISTS episodes CASCADE;
DROP TABLE IF EXISTS webtoons CASCADE;
DROP TABLE IF EXISTS users CASCADE;

CREATE TABLE users
(
    id            bigint      NOT NULL AUTO_INCREMENT, --사용자 PK
    name          varchar(10) NOT NULL,                --사용자명
    email         varchar(50) NOT NULL,                --로그인 이메일
    passwd        varchar(90) NOT NULL,                --로그인 비밀번호
    login_count   int         NOT NULL DEFAULT 0,      --로그인 횟수 (로그인시 마다 1 증가)
    last_login_at datetime             DEFAULT NULL,   --최종로그인 시각
    create_at     datetime    NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    PRIMARY KEY (id),
    UNIQUE KEY unq_user_email (email)
);

CREATE TABLE webtoons
(
    id          bigint      NOT NULL AUTO_INCREMENT,                        --작품 PK
    title       varchar(50) NOT NULL,                                       --작품명
    artist_name varchar(50) NOT NULL,                                       --작가명
    weekday     int         NOT NULL,                                       --연재요일(월:1,화:2,수:3,목:4,금:5,토:6,일:7)
    genre       enum ('OMNIBUS','STORY','FANTASY','SPORTS','ETC') NOT NULL, --장르
    finished    bool        NOT NULL DEFAULT false,                         --완결여부
    create_at   datetime    NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    PRIMARY KEY (id)
);

CREATE TABLE episodes
(
    id           bigint           NOT NULL AUTO_INCREMENT, --에피소드 PK
    webtoon_id   bigint           NOT NULL,                --작품 PK
    seq          int              NOT NULL,                --에피소드 회차
    title        varchar(50)      NOT NULL,                --에피소드명
    tot_revw_pnt bigint DEFAULT 0 NOT NULL,                --누적리뷰별점
    tot_revw_cnt bigint DEFAULT 0 NOT NULL,                --누적리뷰갯수 (평점=누적리뷰별점/누적리뷰갯수)
    create_at    datetime         NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    PRIMARY KEY (id),
    UNIQUE KEY unq_webtoon_seq (webtoon_id, seq),
    CONSTRAINT fk_episodes_to_webtoons FOREIGN KEY (webtoon_id) REFERENCES webtoons (id) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE TABLE reviews
(
    id                bigint   NOT NULL AUTO_INCREMENT, --댓글 PK
    episode_id        bigint   NOT NULL,                --에피소드 PK
    user_id           bigint   NOT NULL,                --작성자 PK
    point             int      NOT NULL,                --별점(1~5)
    aftr_tot_revw_pnt bigint   NOT NULL,                --별점추가후 누적리뷰별점
    aftr_tot_revw_cnt bigint   NOT NULL,                --별점추가후 누적리뷰갯수
    create_at         datetime NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    PRIMARY KEY (id),
    CONSTRAINT fk_reviews_to_episodes FOREIGN KEY (episode_id) REFERENCES episodes (id) ON DELETE RESTRICT ON UPDATE RESTRICT,
    CONSTRAINT fk_reviews_to_users FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE RESTRICT ON UPDATE RESTRICT
);